
package dsmafornuesau;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.mxrck.autocompleter.AutoCompleterCallback;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.awt.event.KeyEvent;

/**
 *
 * @author Ruben Esau
 */
public class PuestoD extends javax.swing.JFrame {

    Connection Con; //Conexion
    Statement St;   //Ejecutar comandos
    ResultSet Rs;   //Resultado de la consulta
    static int x=0;
    TextAutoCompleter autocompleta;
    
    
   
    public PuestoD() {
        initComponents();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new java.awt.Color(255,255,255));
        setResizable(false);
        autocompleta = new TextAutoCompleter(busqueda, new AutoCompleterCallback() {  
        public void callback(Object selectedItem) {
                llenacampos((String)selectedItem);
            }
          });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        agregar = new javax.swing.JButton();
        consultar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        busqueda = new javax.swing.JTextField();
        ComboBusqueda = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(java.awt.SystemColor.activeCaptionBorder);

        agregar.setText("Agregar Puesto");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        consultar.setText("Consultar Puestos");
        consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarActionPerformed(evt);
            }
        });

        modificar.setText("Modificar Puesto");
        modificar.setEnabled(false);
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar Puesto");
        eliminar.setEnabled(false);
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jButton5.setText("Regresar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Gestionar Puestos");

        limpiar.setText("Limpiar campos");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(consultar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(agregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modificar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(agregar)
                .addGap(26, 26, 26)
                .addComponent(consultar)
                .addGap(18, 18, 18)
                .addComponent(modificar)
                .addGap(18, 18, 18)
                .addComponent(eliminar)
                .addGap(18, 18, 18)
                .addComponent(limpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("ID:");

        id.setEnabled(false);

        jLabel3.setText("Nombre:");

        nom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nomKeyTyped(evt);
            }
        });

        jLabel4.setText("Buscar:");

        busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busquedaActionPerformed(evt);
            }
        });
        busqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                busquedaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                busquedaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                busquedaKeyTyped(evt);
            }
        });

        ComboBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));
        ComboBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBusquedaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(busqueda)
                            .addComponent(id, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ComboBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
       if(nom.getText().isEmpty()){JOptionPane.showMessageDialog(null,"Campos vacios");}
        else{
           Object [] opciones ={"Aceptar","Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(rootPane,"¿Estas seguro de eliminar este registro?","Mensaje de Confirmacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar");
            
            if (eleccion == JOptionPane.YES_OPTION)
            {          
                 try {
                    Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
                    St=Con.createStatement();
                    String query="CALL EliminarPue('"+Integer.parseInt(id.getText())+"');";           
                    St.executeUpdate(query);
                    St.close();
                    Con.close();
                    JOptionPane.showMessageDialog(null,"Registro eliminado exitosamente");
                    //cargardatosTabla("select*from puesto");
                    cargardatosTabla("call TODOPue");
                    
                    nom.setText("");
                    id.setText("");
                    modificar.setEnabled(false);
                    eliminar.setEnabled(false);
                    autocompleta.removeAllItems();
                    autocompletaDatos();
                }   catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e);
                    }
            }//if de confirmacion
      }             
    }//GEN-LAST:event_eliminarActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        new ControlPanel().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        if(nom.getText().isEmpty()){JOptionPane.showMessageDialog(null,"Campos vacios");}
        else{
            Object [] opciones ={"Aceptar","Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(rootPane,"¿Estas seguro de agregar un nuevo registro?","Mensaje de Confirmacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar");
            
            if (eleccion == JOptionPane.YES_OPTION)
            {
                 try {
                 String nombre=nom.getText();                     
                 Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
                 St=Con.createStatement();
                 
                 Rs = St.executeQuery("SELECT nom_p FROM puesto WHERE nom_p = '"+nombre+"'");
                 if(Rs.last()){
                    JOptionPane.showMessageDialog(null,"Ya existe un registro con ese nombre");
                    String iddsd=Rs.getString(1);
                 }
                 else{                  
                    String query="insert into Puesto(nom_p) values('"+nom.getText()+"');";           
                    St.executeUpdate(query);
                    JOptionPane.showMessageDialog(null,"Registro agregado exitosamente");
                 //cargardatosTabla("select*from puesto");
                 cargardatosTabla("call TODOPue");
                 nom.setText("");
                 busqueda.setText("");
                  if(modificar.isEnabled() && eliminar.isEnabled()){
                     modificar.setEnabled(false);
                     eliminar.setEnabled(false);
                  }
                 }//
                 
                 St.close();
                 Rs.close();
                 Con.close();
                 autocompleta.removeAllItems();
                 autocompletaDatos();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e);
                }
         }//if de confirmacion                                        
      }      
    }//GEN-LAST:event_agregarActionPerformed

    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarActionPerformed
       String parametro=busqueda.getText();
       llenacampos(parametro);
    }//GEN-LAST:event_consultarActionPerformed

    public void llenacampos(String parametro){
       if(parametro.isEmpty()){
         JOptionPane.showMessageDialog(null,"Campo de busqueda vacio");
       }
       else{
           try {
            Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
            St=Con.createStatement();          
            String query="";
            
           boolean existe;          
           if(ComboBusqueda.getSelectedItem()=="Nombre"){    
             Rs = St.executeQuery("CALL BNOMPue('"+parametro+"');");
           }                   
           else if(ComboBusqueda.getSelectedItem()=="ID"){
             parametro=quitaEspacios(parametro);//quitamos el espacio de mas que se agrego al rellenar el autocompleter             
             Rs = St.executeQuery("CALL BIDPue("+Integer.parseInt(parametro)+");");          
           }                         
                 //a continuacion nos damos cuenta si existe o no
                  if(Rs.last()){existe=true;}
                  else{                
                    JOptionPane.showMessageDialog(null,"No existe el registro");
                    existe=false;
                  }
                                   
                if(existe==true){                
                    if(ComboBusqueda.getSelectedItem()=="ID"){
                        query="CALL BIDPue("+Integer.parseInt(parametro)+");";
                    }
                    else if(ComboBusqueda.getSelectedItem()=="Nombre"){
                        query="CALL BNOMPue('"+parametro+"');";
                    }           
                    Rs=St.executeQuery(query);
                    cargardatos();            
                    modificar.setEnabled(true);
                    eliminar.setEnabled(true);
                    busqueda.setText("");
            }
            
            
            St.close();
            Rs.close();
            Con.close();
            
         } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
         }
       }
    }
    
    public String quitaEspacios(String texto) {
        java.util.StringTokenizer tokens = new java.util.StringTokenizer(texto);
        StringBuilder buff = new StringBuilder();
        while (tokens.hasMoreTokens()) {
            buff.append(" ").append(tokens.nextToken());
        }
        return buff.toString().trim();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //cargardatosTabla("select*from puesto");
        cargardatosTabla("call TODOPue");
        autocompletaDatos();
    }//GEN-LAST:event_formWindowOpened

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        if(nom.getText().isEmpty() || id.getText().isEmpty()){JOptionPane.showMessageDialog(null,"Campos vacios");}
        else{  
            Object [] opciones ={"Aceptar","Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(rootPane,"¿Estas seguro de modificar este registro?","Mensaje de Confirmacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar");          
            if (eleccion == JOptionPane.YES_OPTION)
            {                    
                try {
                    Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
                    St=Con.createStatement();
                    String nombre=nom.getText();
                    String query="CALL ModiPue('"+nombre+"','"+Integer.parseInt(id.getText())+"');";           
                    //String query="update Puesto set nom_p='"+nom.getText()+"' where ID_Pue='"+Integer.parseInt(id.getText())+"';";
                    St.executeUpdate(query);
                    St.close();
                    Con.close();
                    JOptionPane.showMessageDialog(null,"Registro modificado exitosamente");
                    //cargardatosTabla("select*from Puesto");
                    cargardatosTabla("call TODOPue");
                    nom.setText("");
                    id.setText("");
                    modificar.setEnabled(false);
                    eliminar.setEnabled(false);
                    autocompleta.removeAllItems();
                    autocompletaDatos();
                }   catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e);
                   }
            }//if de confirmacion
      }   
    }//GEN-LAST:event_modificarActionPerformed

    private void ComboBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBusquedaActionPerformed
        x=ComboBusqueda.getSelectedIndex();       
        if(x==0 || x==1){         
            busqueda.setText("");
            //cargardatosTabla("select*from Puesto");
            cargardatosTabla("call TODOPue");
        }
        autocompleta.removeAllItems();
        autocompletaDatos();                   
    }//GEN-LAST:event_ComboBusquedaActionPerformed

    private void busquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_busquedaKeyReleased
        
    }//GEN-LAST:event_busquedaKeyReleased

    private void nomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomKeyReleased
         
    }//GEN-LAST:event_nomKeyReleased

    private void busquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_busquedaKeyPressed
          
    }//GEN-LAST:event_busquedaKeyPressed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        busqueda.setText("");
        id.setText("");
        nom.setText("");
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        //cargardatosTabla("select*from puesto");
        cargardatosTabla("call TODOPue");
    }//GEN-LAST:event_limpiarActionPerformed

    private void nomKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomKeyTyped
         String nombre=nom.getText();
          char k=evt.getKeyChar();
         if(Character.isLetter(k)||k=='.'||k==' '){
          if(nombre.length()>0){          
            if(nombre.charAt(nombre.length()-1)=='.'&&k!=' '){
            getToolkit().beep();
            evt.consume();
           }
           else if(nombre.charAt(nombre.length()-1)==' '&&(k==' '||k=='.')){
            getToolkit().beep();
            evt.consume();
           }
            else if(nombre.length()==14){
              getToolkit().beep();
              evt.consume();
            }  
          }
          else if(nombre.isEmpty()){
            if(k==' '||k=='.'){
              getToolkit().beep();
              evt.consume();  
            }
          }                 
         }else{
              //getToolkit().beep();
              evt.consume();  
         }         
         if(nombre.contains(".")&&k=='.'){
              getToolkit().beep();
              evt.consume();
          }
    }//GEN-LAST:event_nomKeyTyped

    private void busquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busquedaActionPerformed

    private void busquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_busquedaKeyTyped
        if(ComboBusqueda.getSelectedItem()=="Nombre"){
         String nombre=busqueda.getText();
          char k=evt.getKeyChar();
         if(Character.isLetter(k)||k=='.'||k==' '){
          if(nombre.length()>0){          
            if(nombre.charAt(nombre.length()-1)=='.'&&k!=' '){
            getToolkit().beep();
            evt.consume();
           }
           else if(nombre.charAt(nombre.length()-1)==' '&&(k==' '||k=='.')){
            getToolkit().beep();
            evt.consume();
           }
            else if(nombre.length()==14){
              getToolkit().beep();
              evt.consume();
            }  
          }
          else if(nombre.isEmpty()){
            if(k==' '||k=='.'){
              getToolkit().beep();
              evt.consume();  
            }
          }                 
         }else{
              //getToolkit().beep();
              evt.consume();  
         } 
         
         if(nombre.contains(".")&&k=='.'){
              getToolkit().beep();
              evt.consume();
          }
      }
      else if(ComboBusqueda.getSelectedItem()=="ID"){
        char k=evt.getKeyChar();
        String ID=busqueda.getText();        
        if(Character.isDigit(k)){
           if(ID.length()>0){          
             if(ID.length()==10){
              //getToolkit().beep();
              evt.consume();
             }
            }
         }               
        else{
          evt.consume();
        }//else
      }
    }//GEN-LAST:event_busquedaKeyTyped
    
    public void cargardatos(){
         try {
           while(Rs.next()){
            id.setText(Rs.getString(1)); 
            nom.setText(Rs.getString(2));
           }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"Error"+e);
        }        
    }
    
    public void cargardatosTabla(String consulta){       
        try {          
           DefaultTableModel tabla=new DefaultTableModel();         
           Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
           St=Con.createStatement();
           Rs=St.executeQuery(consulta);
           tabla.setColumnIdentifiers(new Object[]{"ID","Nombre"});
           while(Rs.next()){                      
            tabla.addRow(new Object[]{Rs.getString(1),Rs.getString(2)});           
           }
           jTable1.setModel(tabla);
          
           
           St.close();
           Rs.close();
           Con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }        
    }
    
    public void autocompletaDatos(){
        //autocompleta= new TextAutoCompleter(busqueda);                 
        try {
            Con=DriverManager.getConnection(Globales.Url,Globales.User,Globales.Pass);
            St=Con.createStatement();
            //Rs=St.executeQuery("select*from Puesto");
            Rs=St.executeQuery("call TODOPue");        
            while(Rs.next()){
                if(ComboBusqueda.getSelectedItem()=="ID"){                   
                    autocompleta.addItem(Rs.getString(1)+" ");//rellenamos el autocompleter con los ID, se agrega un espacio a los ID para evitar errores
                }
                    else if(ComboBusqueda.getSelectedItem()=="Nombre")
                   autocompleta.addItem(Rs.getString(2));//rellenamos los autocompleter con los nombres
            }
            St.close();
            Rs.close();
            Con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PuestoD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBusqueda;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField busqueda;
    private javax.swing.JButton consultar;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField nom;
    // End of variables declaration//GEN-END:variables
}
